#!/usr/bin/env python

import os
import sys
import copy
import json

'''
This script processes a root-level manifest file (manifest.json) and generates an in-app
Manifest.js file that is used by the application to render parts of the UI and allow users
to select different datasets. The manifest file is expected to follow the schema as defined
in application documentation.
'''

OBJ_INDENT = 2 # None

def process_manifest(in_fn, out_fn, local_overrides_fn=None):
    manifest = None
    with open(in_fn, 'r') as in_fh:
        manifest = json.load(in_fh)
    if not manifest:
        print('Error: Failed to load manifest file: {}'.format(in_fn))
        sys.exit(1)
    local_overrides = None
    if local_overrides_fn:
        if not os.path.exists(local_overrides_fn):
            print('Error: Local overrides file does not exist: {}'.format(local_overrides_fn))
            sys.exit(1)
        with open(local_overrides_fn, 'r') as local_overrides_fh:
            local_overrides = json.load(local_overrides_fh)
            if not local_overrides:
                print('Error: Failed to load local overrides file: {}'.format(local_overrides_fn))
                sys.exit(1)
    with open(out_fn, 'w') as out_fh:
        out_fh.write("""
// This file is generated by process_manifest.py
// Do not edit this file directly
""".lstrip())
        core = manifest['core']
        local = manifest['local']
        metadata = copy.deepcopy(core)
        # merge local with core, if local is populated
        if 'data' in local:
            local_data = local['data']
            if 'orderedSets' in local_data and 'sets' in local_data:
                local_ordered_sets = local_data['orderedSets']
                local_data_sets = local_data['sets']
                # check that sets key has all local orderedSets values
                local_ordered_set_sampleSets_found = []
                for local_ordered_set in local_ordered_sets:
                    # local_ordered_set_sampleSet = local_ordered_set['sampleSet']
                    local_ordered_set_sampleSet = local_ordered_set
                    # if local_ordered_set_sampleSet not in local_data_sets:
                    #    raise ValueError('Error: Missing local orderedSet in sets key: {}'.format(local_ordered_set_sampleSet))
                    local_ordered_set_sampleSets_found.append(local_ordered_set_sampleSet)
                # is there a set sampleSet entry for each orderedSet key?
                if set(local_ordered_set_sampleSets_found) != set(local_ordered_sets):
                    raise ValueError('Error: Mismatch between local orderedSets and sets key list -- local sets must contain objects for all local orderedSets keys')
                # merge data
                insertion_index = 0
                for local_ordered_set in local_ordered_sets:
                    if local_ordered_set not in metadata['data']['orderedSets']:
                        # insert local orderedSet key at front of list, so that it is presented first in the UI
                        metadata['data']['orderedSets'].insert(insertion_index, local_ordered_set)
                        insertion_index += 1
                        local_ordered_set_for_sampleSet = [x for x in local_data_sets if x['sampleSet'] == local_ordered_set][0]
                        metadata['data']['sets'].append(copy.deepcopy(local_ordered_set_for_sampleSet))
                    else:
                        raise ValueError('Error: Duplicate orderedSet in local key: {}'.format(local_ordered_set))
        process_manifest_metadata(metadata, out_fh, local_overrides)
    return

def process_manifest_metadata(metadata, out_fh, local_overrides=None):
    data = metadata['data'] if 'data' in metadata else None
    if not data:
        print('Error: Failed to find data in manifest metadata')
        sys.exit(1)
    orderedSets = data['orderedSets'] if 'orderedSets' in data else None
    if not orderedSets:
        print('Error: Failed to find orderedSets in manifest metadata item')
        sys.exit(1)
    sets = data['sets'] if 'sets' in data else None
    if not sets:
        print('Error: Failed to find sets in manifest metadata')
        sys.exit(1)
    defaultGenome = data['defaultGenome'] if 'defaultGenome' in data else None
    if not defaultGenome:
        print('Error: Failed to find defaultGenome in manifest metadata item')
        sys.exit(1)
    defaultSet = data['defaultSet'] if 'defaultSet' in data else None
    if not defaultSet:
        print('Error: Failed to find defaultSet in manifest metadata item')
        sys.exit(1)
    out_fh.write(f"""
export const orderedSampleSetKeys = {orderedSets};
""".lstrip())
    process_manifest_item_by_sample_set(orderedSets, sets, out_fh, local_overrides)
    process_manifest_item_by_genome(orderedSets, sets, defaultGenome, defaultSet, out_fh)
    process_manifest_item_by_mode(orderedSets, sets, out_fh)
    return

def process_manifest_item_by_sample_set(orderedSets, sets, out_fh, local_overrides=None):
    hgTrackServerBySampleSetObj = {}
    navbarDescriptionsBySampleSetObj = {}
    formattedDescriptionsBySampleSetObj = {}
    for orderedSet in orderedSets:
        orderedSetData = None
        try:
            orderedSetData = list(filter(lambda x: x['sampleSet'] == orderedSet, sets))[0]
        except:
            print(sets)
            sys.exit(1)
        if not orderedSetData:
            print('Error: Failed to find orderedSetData for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        navbarDescriptionsBySampleSetObj[orderedSet] = orderedSetData['navbarDescription'] if 'navbarDescription' in orderedSetData else None
        if not navbarDescriptionsBySampleSetObj[orderedSet]:
            print('Error: Failed to find navbarDescription for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        formattedDescriptionsBySampleSetObj[orderedSet] = orderedSetData['formattedDescription'] if 'formattedDescription' in orderedSetData else None
        if not formattedDescriptionsBySampleSetObj[orderedSet]:
            print('Error: Failed to find formattedDescription for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        hgTrackServerBySampleSetObj[orderedSet] = orderedSetData['hgTrackServer'] if 'hgTrackServer' in orderedSetData else None
        if not hgTrackServerBySampleSetObj[orderedSet]:
            print('Error: Failed to find hgTrackServer for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        if local_overrides and orderedSet in local_overrides:
            local_overrides_data = local_overrides[orderedSet]
            if 'navbarDescription' in local_overrides_data:
                navbarDescriptionsBySampleSetObj[orderedSet] = local_overrides_data['navbarDescription']
            if 'hgTrackServer' in local_overrides_data:
                hgTrackServerBySampleSetObj[orderedSet] = local_overrides_data['hgTrackServer']
    navbarDescriptionsBySampleSetString = json.dumps(navbarDescriptionsBySampleSetObj, indent=OBJ_INDENT)
    formattedDescriptionsBySampleSetString = json.dumps(formattedDescriptionsBySampleSetObj, indent=OBJ_INDENT)
    hgTrackServerBySampleSetString = json.dumps(hgTrackServerBySampleSetObj, indent=OBJ_INDENT)
    out_fh.write(f"""
export const navbarDescriptionsBySampleSet = {navbarDescriptionsBySampleSetString};
export const formattedDescriptionsBySampleSet = {formattedDescriptionsBySampleSetString};
export const trackServerBySampleSet = {hgTrackServerBySampleSetString};
""".lstrip())
    return

def process_manifest_item_by_genome(orderedSets, sets, defaultGenome, defaultSet, out_fh):
    groupsByGenomeObj = {}
    defaultApplicationGroupString = None
    defaultSingleGroupObj = {}
    defaultPairedGroupObj = {}
    modelsByGenomeObj = {}
    complexitiesByGenomeObj = {}
    for orderedSet in orderedSets:
        orderedSetData = None
        try:
            orderedSetData = list(filter(lambda x: x['sampleSet'] == orderedSet, sets))[0]
        except:
            print(sets)
            sys.exit(1)
        if not orderedSetData:
            print('Error: Failed to find orderedSetData for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        groupsByGenomeObj[orderedSet] = orderedSetData['setMetadataByGenome'] if 'setMetadataByGenome' in orderedSetData else None
        if not groupsByGenomeObj[orderedSet]:
            print('Error: Failed to find setMetadataByGenome for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        if defaultSet == orderedSet:
            defaultGroup = orderedSetData['defaultGroup'] if 'defaultGroup' in orderedSetData else None
            if not defaultGroup:
                print('Error: Failed to find defaultGroup for defaultSet: {}'.format(defaultSet))
                sys.exit(1)
            defaultApplicationGroupString = json.dumps(defaultGroup)
        defaultSingleGroupObj[orderedSet] = orderedSetData['defaultSingleGroup'] if 'defaultSingleGroup' in orderedSetData else None
        if not defaultSingleGroupObj[orderedSet]:
            print('Error: Failed to find defaultSingleGroup for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        defaultPairedGroupObj[orderedSet] = orderedSetData['defaultPairedGroup'] if 'defaultPairedGroup' in orderedSetData else None
        if not defaultPairedGroupObj[orderedSet]:
            print('Error: Failed to find defaultPairedGroup for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        modelsByGenomeObj[orderedSet] = orderedSetData['modelMetadataByGenome'] if 'modelMetadataByGenome' in orderedSetData else None
        if not modelsByGenomeObj[orderedSet]:
            print('Error: Failed to find modelMetadataByGenome for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        complexitiesByGenomeObj[orderedSet] = orderedSetData['complexitiesMetadataByGenome'] if 'complexitiesMetadataByGenome' in orderedSetData else None
        if not complexitiesByGenomeObj[orderedSet]:
            print('Error: Failed to find complexitiesMetadataByGenome for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
    groupsByGenomeString = json.dumps(groupsByGenomeObj, indent=OBJ_INDENT)
    defaultSingleGroupString = json.dumps(defaultSingleGroupObj)
    defaultPairedGroupString = json.dumps(defaultPairedGroupObj)
    modelsByGenomeString = json.dumps(modelsByGenomeObj, indent=OBJ_INDENT)
    complexitiesByGenomeString = json.dumps(complexitiesByGenomeObj, indent=OBJ_INDENT)
    out_fh.write(f"""
export const groupsByGenome = {groupsByGenomeString};
export const applicationGroups = groupsByGenome;
export const defaultApplicationGroup = {defaultApplicationGroupString};
export const defaultSingleGroupKeys = {defaultSingleGroupString};
export const defaultPairedGroupKeys = {defaultPairedGroupString};
export const modelsByGenome = {modelsByGenomeString};
export const complexitiesByGenome = {complexitiesByGenomeString};
""".lstrip())
    return

def process_manifest_item_by_mode(orderedSets, sets, out_fh):
    assembliesByModeObj = {}
    for orderedSet in orderedSets:
        orderedSetData = None
        try:
            orderedSetData = list(filter(lambda x: x['sampleSet'] == orderedSet, sets))[0]
        except:
            print(sets)
            sys.exit(1)
        if not orderedSetData:
            print('Error: Failed to find orderedSetData for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        assembliesByModeObj[orderedSet] = orderedSetData['assembliesMetadataByMode'] if 'assembliesMetadataByMode' in orderedSetData else None
        if not assembliesByModeObj[orderedSet]:
            print('Error: Failed to find assembliesMetadataByMode for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
    assembliesByModeString = json.dumps(assembliesByModeObj, indent=OBJ_INDENT)
    out_fh.write(f"""
export const assembliesByMode = {assembliesByModeString};
""".lstrip())
    return

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print('Usage: {} <manifest_path> <output_path> [<local_overrides_path>]'.format(sys.argv[0]))
        sys.exit(1)
    manifest_input_path = sys.argv[1]
    manifest_output_path = sys.argv[2]
    manifest_local_overrides_path = sys.argv[3] if len(sys.argv) > 3 else None
    if not os.path.exists(manifest_input_path):
        print('Error: Input manifest file does not exist: {}'.format(manifest_input_path))
        sys.exit(1)

    if os.path.exists(manifest_output_path):
        print('Warning: Overwriting output manifest file: {}'.format(manifest_output_path))
    process_manifest(manifest_input_path, manifest_output_path, manifest_local_overrides_path)