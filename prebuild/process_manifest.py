#!/usr/bin/env python

import os
import sys
import json

def process_manifest(in_fn, out_fn):
    manifest = None
    with open(in_fn, 'r') as in_fh:
        manifest = json.load(in_fh)
    if not manifest:
        print('Error: Failed to load manifest file: {}'.format(in_fn))
        sys.exit(1)
    with open(out_fn, 'w') as out_fh:
        out_fh.write("""
// This file is generated by process_manifest.py
// Do not edit this file directly
""".lstrip())
        core = manifest['core']
        process_manifest_item(core, out_fh)

def process_manifest_item(item, out_fh):
    data = item['data'] if 'data' in item else None
    if not data:
        print('Error: Failed to find data in manifest item')
        sys.exit(1)
    orderedSets = data['orderedSets'] if 'orderedSets' in data else None
    if not orderedSets:
        print('Error: Failed to find orderedSets in manifest item data')
        sys.exit(1)
    sets = data['sets'] if 'sets' in data else None
    if not sets:
        print('Error: Failed to find sets in manifest item data')
        sys.exit(1)
    defaultGenome = data['defaultGenome'] if 'defaultGenome' in data else None
    if not defaultGenome:
        print('Error: Failed to find defaultGenome in manifest item data')
        sys.exit(1)
    defaultSet = data['defaultSet'] if 'defaultSet' in data else None
    if not defaultSet:
        print('Error: Failed to find defaultSet in manifest item data')
        sys.exit(1)
    process_manifest_item_groups_by_genome(orderedSets, sets, defaultGenome, defaultSet, out_fh)

def process_manifest_item_groups_by_genome(orderedSets, sets, defaultGenome, defaultSet, out_fh):
    groupsByGenomeObj = {}
    defaultApplicationGroupString = None
    defaultSingleGroupObj = {}
    defaultPairedGroupObj = {}
    for orderedSet in orderedSets:
        orderedSetData = None
        try:
            orderedSetData = list(filter(lambda x: x['sampleSet'] == orderedSet, sets))[0]
        except:
            print(sets)
            sys.exit(1)
        if not orderedSetData:
            print('Error: Failed to find orderedSetData for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        groupsByGenomeObj[orderedSet] = orderedSetData['setMetadataByGenome']
        if defaultSet == orderedSet:
            defaultGroup = orderedSetData['defaultGroup'] if 'defaultGroup' in orderedSetData else None
            if not defaultGroup:
                print('Error: Failed to find defaultGroup for defaultSet: {}'.format(defaultSet))
                sys.exit(1)
            defaultApplicationGroupString = json.dumps(defaultGroup)
        defaultSingleGroupObj[orderedSet] = orderedSetData['defaultSingleGroup'] if 'defaultSingleGroup' in orderedSetData else None
        if not defaultSingleGroupObj[orderedSet]:
            print('Error: Failed to find defaultSingleGroup for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
        defaultPairedGroupObj[orderedSet] = orderedSetData['defaultPairedGroup'] if 'defaultPairedGroup' in orderedSetData else None
        if not defaultPairedGroupObj[orderedSet]:
            print('Error: Failed to find defaultPairedGroup for orderedSet: {}'.format(orderedSet))
            sys.exit(1)
    # groupsByGenomeString = json.dumps(groupsByGenomeObj, indent=2)
    groupsByGenomeString = json.dumps(groupsByGenomeObj)
    defaultSingleGroupString = json.dumps(defaultSingleGroupObj)
    defaultPairedGroupString = json.dumps(defaultPairedGroupObj)
    out_fh.write(f"""
export const groupsByGenome = {groupsByGenomeString};
export const applicationGroups = groupsByGenome;
export const defaultApplicationGroup = {defaultApplicationGroupString};
export const defaultSingleGroupKeys = {defaultSingleGroupString};
export const defaultPairedGroupKeys = {defaultPairedGroupString};
""".lstrip())

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print('Usage: {} <manifest_path> <output_path>'.format(sys.argv[0]))
        sys.exit(1)

    manifest_input_path = sys.argv[1]
    manifest_output_path = sys.argv[2]

    if not os.path.exists(manifest_input_path):
        print('Error: Input manifest file does not exist: {}'.format(manifest_input_path))
        sys.exit(1)

    if os.path.exists(manifest_output_path):
        print('Warning: Overwriting output manifest file: {}'.format(manifest_output_path))

    process_manifest(manifest_input_path, manifest_output_path)